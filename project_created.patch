Index: app/src/main/java/com/asliborneo/google_play_android_developer/Maps.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/asliborneo/google_play_android_developer/Maps.java	(date 1537210093000)
+++ app/src/main/java/com/asliborneo/google_play_android_developer/Maps.java	(date 1537210093000)
@@ -0,0 +1,287 @@
+package com.asliborneo.google_play_android_developer;
+
+import android.os.Bundle;
+import android.support.v4.app.FragmentActivity;
+import android.support.v7.app.AppCompatActivity;
+import android.Manifest;
+import android.animation.ValueAnimator;
+import android.content.pm.PackageManager;
+import android.graphics.Color;
+import android.location.Location;
+import android.os.Handler;
+import android.os.SystemClock;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.design.widget.Snackbar;
+
+
+import android.util.Log;
+import android.util.Size;
+import android.view.View;
+import android.view.animation.Interpolator;
+import android.view.animation.LinearInterpolator;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.Toast;
+
+import com.asliborneo.google_play_android_developer.Common.Common;
+import com.asliborneo.google_play_android_developer.Remote.IGoogleAPI;
+import com.firebase.geofire.GeoFire;
+import com.firebase.geofire.GeoLocation;
+import com.github.glomadrian.materialanimatedswitch.MaterialAnimatedSwitch;
+import com.google.android.gms.common.ConnectionResult;
+import com.google.android.gms.common.GooglePlayServicesUtil;
+import com.google.android.gms.common.api.GoogleApiClient;
+import com.google.android.gms.common.api.Status;
+import com.google.android.gms.location.LocationListener;
+import com.google.android.gms.location.LocationRequest;
+import com.google.android.gms.location.LocationServices;
+import com.google.android.gms.location.places.Place;
+import com.google.android.gms.location.places.ui.PlaceAutocomplete;
+import com.google.android.gms.location.places.ui.PlaceAutocompleteFragment;
+import com.google.android.gms.location.places.ui.PlaceSelectionListener;
+import com.google.android.gms.maps.CameraUpdate;
+import com.google.android.gms.maps.CameraUpdateFactory;
+import com.google.android.gms.maps.GoogleMap;
+import com.google.android.gms.maps.OnMapReadyCallback;
+import com.google.android.gms.maps.SupportMapFragment;
+import com.google.android.gms.maps.model.BitmapDescriptorFactory;
+import com.google.android.gms.maps.model.CameraPosition;
+import com.google.android.gms.maps.model.JointType;
+import com.google.android.gms.maps.model.LatLng;
+import com.google.android.gms.maps.model.LatLngBounds;
+import com.google.android.gms.maps.model.Marker;
+import com.google.android.gms.maps.model.MarkerOptions;
+import com.google.android.gms.maps.model.Polyline;
+import com.google.android.gms.maps.model.PolylineOptions;
+import com.google.android.gms.maps.model.SquareCap;
+import com.google.firebase.auth.FirebaseAuth;
+import com.google.firebase.database.DatabaseError;
+import com.google.firebase.database.DatabaseReference;
+import com.google.firebase.database.FirebaseDatabase;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import retrofit2.Call;
+import retrofit2.Callback;
+import retrofit2.Response;
+
+public class Maps extends FragmentActivity implements  OnMapReadyCallback,
+        GoogleApiClient.ConnectionCallbacks,
+        GoogleApiClient.OnConnectionFailedListener,
+        LocationListener
+{
+    private GoogleMap mMap;
+
+    private static final int MY_PERMISSION_REQUEST_CODE=7000;
+    private static  final  int PLAY_SERVICE_RES_REQUEST = 7001;
+
+    private LocationRequest mLocationRequest;
+    private GoogleApiClient mGoogleApiClient;
+    private Location mLastLocation;
+
+    private static int UPDATE_INTERVAL = 5000;
+    private static int FASTEST_INTERVAL = 3000;
+    private static int DISPLACEMENT = 10;
+
+    DatabaseReference drivers;
+    GeoFire geoFire;
+
+    Marker mCurrent;
+
+    MaterialAnimatedSwitch location_switch;
+    SupportMapFragment mapFragment;
+
+    private List<LatLng>polyLineList;
+    private Marker carMarker;
+    private float v;
+    private double lat,lng;
+    private Handler handler;
+    private  LatLng startPosition, endPosition,currentPosition;
+    private  int index,next;
+    //private Button btnGo;
+    PlaceAutocompleteFragment places;
+    private String destination;
+    private PolylineOptions polylineOptions, blackPolylineOptions;
+    private Polyline blackPolyline,greyPolyline;
+
+    private IGoogleAPI mService;
+
+    Runnable drawPathRunnable= new Runnable() {
+        @Override
+        public void run() {
+            if(index<polyLineList.size()-1)
+            {
+                index++;
+                next = index+1;
+            }
+            if(index<polyLineList.size()-1)
+            {
+                startPosition = polyLineList.get(index);
+                endPosition = polyLineList.get(next);
+            }
+            ValueAnimator valueAnimator = ValueAnimator.ofFloat(0f,1.0f);
+            valueAnimator.setInterpolator(new LinearInterpolator());
+            valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
+                @Override
+                public void onAnimationUpdate(ValueAnimator valueAnimator) {
+                    v = valueAnimator.getAnimatedFraction();
+                    lng =v*endPosition.longitude+(1-v)*startPosition.latitude;
+                    LatLng newPos = new LatLng(lat,lng);
+                    carMarker.setPosition(newPos);
+                    carMarker.setAnchor(0.5f,0.5f);
+                    carMarker.setRotation(getBearing(startPosition,newPos));
+                    mMap.moveCamera(CameraUpdateFactory.newCameraPosition(
+                            new CameraPosition.Builder()
+                                    .target(newPos)
+                                    .zoom(15.5f)
+                                    .build()
+                    ));
+                }
+            });
+            valueAnimator.start();
+            handler.postDelayed(this,3000);
+        }
+    };
+
+    private float getBearing(LatLng startPosition, LatLng newPos) {
+        double lat = Math.abs(startPosition.latitude - endPosition.latitude);
+        double lng = Math.abs(startPosition.longitude - endPosition.longitude);
+
+        if(startPosition.latitude < endPosition.latitude && startPosition.longitude<endPosition.longitude)
+            return (float)(Math.toDegrees(Math.atan(lng/lat)));
+        else if(startPosition.latitude >= endPosition.latitude && startPosition.longitude < endPosition.longitude)
+            return (float)((90-Math.toDegrees(Math.atan(lng/lat)))+90);
+        else if(startPosition.latitude >= endPosition.latitude && startPosition.longitude >= endPosition.longitude)
+            return (float)(Math.toDegrees(Math.atan(lng/lat))+180);
+        else if(startPosition.latitude < endPosition.latitude && startPosition.longitude >= endPosition.longitude)
+            return (float)((90-Math.toDegrees(Math.atan(lng/lat)))+270);
+        return -1;
+    }
+
+    
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_maps);
+
+        mapFragment = (SupportMapFragment) getSupportFragmentManager()
+                .findFragmentById(R.id.map);
+        mapFragment.getMapAsync(this);
+
+        location_switch = (MaterialAnimatedSwitch) findViewById(R.id.location_switch);
+        location_switch.setOnCheckedChangeListener(new MaterialAnimatedSwitch.OnCheckedChangeListener() {
+            @Override
+            public void onCheckedChanged(boolean isOnline) {
+                if(isOnline)
+                {
+                    startLocationUpdates();
+                    displayLocation();
+
+                    Snackbar.make(mapFragment.getView(),"You're Online", Snackbar.LENGTH_SHORT)
+                            .show();
+                }
+                else
+                {
+                    stopLocationUpdates();
+                    mCurrent.remove();
+                    mMap.clear();
+                    handler.removeCallbacks(drawPathRunnable);
+                    Snackbar.make(mapFragment.getView(), "You're Offline", Snackbar.LENGTH_SHORT)
+                            .show();
+                }
+            }
+        });
+
+
+        polyLineList = new ArrayList<>();
+
+
+        //Places API
+        places = (PlaceAutocompleteFragment) getFragmentManager().findFragmentById(R.id.place_autocomplete_powered_by_google);
+        places.setOnPlaceSelectedListener(new PlaceSelectionListener() {
+            @Override
+            public void onPlaceSelected(Place place) {
+                if(location_switch.isChecked())
+                {
+                    destination = place.getAddress().toString();
+                    destination = destination.replace(" ", "+"  );
+
+                    getDirection();
+                }
+                else
+                {
+                    Toast.makeText(Maps.this, "Please Change your status to ONLINE", Toast.LENGTH_SHORT);
+                }
+            }
+
+            @Override
+            public void onError(Status status) {
+                Toast.makeText(Maps.this,""+status.toString(),Toast.LENGTH_SHORT);
+            }
+        });
+
+
+
+        drivers = FirebaseDatabase.getInstance().getReference("Drivers");
+        geoFire = new GeoFire(drivers);
+        setUpLocation();
+
+        mService = Common.getGoogleAPI();
+    }
+
+
+    private void startLocationUpdates()
+    {
+
+    }
+
+    private void displayLocation() {
+    }
+
+
+    private void stopLocationUpdates() {
+        
+    }
+
+
+    private void setUpLocation()
+    {
+        
+    }
+    
+    private void getDirection() {
+    }
+
+
+    @Override
+    public void onConnected(@Nullable Bundle bundle) {
+
+    }
+
+    @Override
+    public void onConnectionSuspended(int i) {
+
+    }
+
+    @Override
+    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {
+
+    }
+
+    @Override
+    public void onLocationChanged(Location location) {
+
+    }
+
+    @Override
+    public void onMapReady(GoogleMap googleMap) {
+
+    }
+}
Index: app/src/main/res/layout/activity_maps.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_maps.xml	(date 1537206240000)
+++ app/src/main/res/layout/activity_maps.xml	(date 1537206240000)
@@ -0,0 +1,83 @@
+<RelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    >
+
+    <LinearLayout
+        android:id="@+id/layout_panel"
+        android:orientation="horizontal"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content">
+
+        <!-- <EditText
+          android:id="@+id/edtPlace"
+          android:hint="Enter Pickup Location"
+          android:layout_margin="10dp"
+          android:layout_weight="5"
+              android:layout_width="match_parent"
+              android:layout_height="wrap_content" /> -->
+
+        <fragment
+            android:id="@+id/place"
+            android:name="com.google.android.gms.location.places.ui.PlaceAutocompleteFragment"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"/>
+
+
+        <!--  <Button
+              android:id="@+id/btnGo"
+              android:text="GO"
+              android:layout_weight="1"
+              android:layout_marginTop="10dp"
+              android:layout_width="wrap_content"
+              android:layout_height="wrap_content" />-->
+    </LinearLayout>
+
+    <fragment
+        android:layout_below="@+id/layout_panel"
+        android:id="@+id/map"
+        android:name="com.google.android.gms.maps.SupportMapFragment"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        tools:context=".Welcome" />
+
+    <android.support.v7.widget.CardView
+        app:cardElevation="10dp"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom='true'
+        >
+        <LinearLayout
+            android:orientation="horizontal"
+            android:weightSum="10"
+            android:layout_margin="16dp"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content">
+
+            <com.github.glomadrian.materialanimatedswitch.MaterialAnimatedSwitch
+                android:id="@+id/location_switch"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="3"
+                app:icon_release="@drawable/ic_location_off"
+                app:icon_press = "@drawable/ic_location_on"
+                app:base_release_color="@color/baseReleaseColor"
+                app:base_press_color="@color/basePressColor"
+                app:ball_release_color="@color/ballReleaseColor"
+                app:ball_press_color= "@android:color/white"/>
+
+            <Button
+                android:id="@+id/btn_find_user"
+                android:layout_width="0dp"
+                android:text="FIND USER"
+                android:layout_weight="7"
+                android:layout_height="wrap_content" />
+        </LinearLayout>
+
+    </android.support.v7.widget.CardView>
+
+</RelativeLayout>
+
Index: app/src/main/res/values/ids.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/ids.xml	(date 1537204776000)
+++ app/src/main/res/values/ids.xml	(date 1537204776000)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <item name="location_switch" type="id">location_switch</item>
+</resources>
\ No newline at end of file
Index: .idea/caches/build_file_checksums.ser
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/caches/build_file_checksums.ser	(date 1537204337000)
+++ .idea/caches/build_file_checksums.ser	(date 1537209613000)
@@ -1,2 +1,2 @@
-�� sr ?com.android.tools.idea.gradle.project.ProjectBuildFileChecksumsDW4��g) J myLastGradleSyncTimestampL myFileChecksumst Ljava/util/Map;xp  e�x�sr java.util.HashMap���`� F 
-loadFactorI 	thresholdxp?@     w      t settings.gradleur [B���T�  xp   ��Ñi��(Z^Sf/%t build.gradleuq ~    �{�Pt�<�P���n��=t local.propertiesuq ~    �_)���rHۀ���t '/Users/appdev/.gradle/gradle.propertiesuq ~    ��ُ ��	���B~t gradle.propertiesuq ~    �vP��)�8�@�p�b/t app/build.gradleuq ~    G t�'��3�\�x
\ No newline at end of file
+�� sr ?com.android.tools.idea.gradle.project.ProjectBuildFileChecksumsDW4��g) J myLastGradleSyncTimestampL myFileChecksumst Ljava/util/Map;xp  e��;Vsr java.util.HashMap���`� F 
+loadFactorI 	thresholdxp?@     w      t settings.gradleur [B���T�  xp   ��Ñi��(Z^Sf/%t build.gradleuq ~    �{�Pt�<�P���n��=t local.propertiesuq ~    �_)���rHۀ���t '/Users/appdev/.gradle/gradle.propertiesuq ~    ��ُ ��	���B~t gradle.propertiesuq ~    �vP��)�8�@�p�b/t app/build.gradleuq ~    g��YgB@�t��x
\ No newline at end of file
